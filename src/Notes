API, stands for Application Programming Interface, is for providing Programatic Interface.

REST stands for Representational State Transfer, WEB by design is stateless.
Client stores the state information and takes off this load from the server.
Once the request is processed, server doesn't remember anything about the client! Unless it's facebook.

NOUNs for REST API :

    1. A 'resource' is Model in our application. Data models we are talking about here btw!
    2. An 'endpoint' represents a single record or a collection of records. Endpoints usually represent resources, not actions.
    Naming conventions need to be followed if you are creating an endpoint which has details of Fortnite players, name the endpoint test.com/players instead of test.com/player

VERBs for REST API :

    The HTTP methods, like GET and POST, is what defines the kind of action to take on the specified resource or collection.

    1. GET

        is used for either fetching a single resource or a collection of resource.

    2. POST

        is used to add a new resource to a collection. You POST to URLs that are pointing to collection and not to individual values.
        You wouldn't POST to test.com/players/234 but instead you would POST to test.com/players

    3. PUT

        is the HTTP method when we want to update a record. Here, you would PUT to individual record such as test.com/players/234 and not PUT to a collection.

    4. DELETE

        is used for sending a DELETE request which can be sent to a particular record or the whole collection

We use Postman to Test the APIs.

Format of a Request String :

    test.com/api/v1/games?order=desc&sort=points
    Everything after ? is a key value pair of additional parameters. The part after the question mark is called the query string. This may not be the best option to send requests.
    Take example if you want response only in JSON format but the URL is returning XML, JSON and other formats as well.

    Here comes the HTTP Headers to the rescue.
    HTTP Headers are those containers that take up additional information from the request without modifying the actual URL.

    Popular HTTP Headers to pay attention to :

        1. Accept : Specifies the file format the requester wants.
        2. Accept-Language : Specifies human readable language such as English, Spanish, Russians.
        3. Cache-Control : Can the response be generated from Cache memory or not?
        4. Content-Type : This response header identifies the kind of data that's being sent back.
        5. Status : tell us about the state of the content / request

                200 - 299 : Content is good, Everything is ok!
                300 - 399 : Understood what is being requested but the requested data has been moved somewhere else, hence redirecting.
                400 - 499 : Errors generated by the client
                500 - 599 : Errors generated by the servers

    GET requests sends the additional data in the URL which is readable by the client/user.
    POST requests encodes this additional data into the body of the requests and is hidden from the client but is available to consume by the API.

    Useful Headers + Correct status codes + Appropriate formats + useful data = Great HTTP Response!

Always try to provide version of the api is the URI, and try to maintain the Legacy APIs for as long as possible.
How should you handle changes to the functionality of an API? - Versioning

Caching :

    A cache is a service that holds onto data that you need to be able to retrieve quickly.
    A cache stores data that you need often or that takes a long time to compute.
    This is very useful when your data takes awhile to retrieve or calculate.
    Some common caches you might use are memcached, TimesTen if you use Oracle products, or HazelCast for the Java world.
    For caching compiled pages, Varnish is a very common and powerful choice.

    Service that runs in memory that stores newly accessed data, that helps in avoiding costly operation on the server side. There are various caches to look out for.
    3rd party API maybe implementing their own caching so look out for unexpected behavior.

    Rate limiting : helps avaoid DDOS attacks and users over using the API.
    Rate limiting usually needs some form of authentication, too, to be successful.

Authentication and Security:

    Security is such an important concept. We as a developer owe it to our users to keep their data secure.

    API-Tokens :
        Most Common way of authentication.  A unique string assigned to the client to append with the request so that the server could validate them.